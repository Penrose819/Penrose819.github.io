<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Alogrithm Thinking</title>
      <link href="/2022/07/23/Alogrithm-Thinking/"/>
      <url>/2022/07/23/Alogrithm-Thinking/</url>
      
        <content type="html"><![CDATA[<h3 id="overview">1. Overview</h3><p>本笔记主要基于mit 6.006课程的lecture note以及对应的《Introduction toAlogrithm》中的reading部分。这门课分为以下八个板块：</p><blockquote><ol type="1"><li>Alogrithm Thinking</li><li>Sorting &amp; Trees</li><li>Hashing</li><li>Numerics</li><li>Graphs</li><li>Shortest Path</li><li>Dynamic Programming</li><li>Advanced Topics</li></ol></blockquote><p>本文对应第一个module：Alogrithm Thinking。</p><h3 id="the-peak-finding-problem">2. The Peak-Finding Problem</h3><p>我们来看一个找峰值的算法题，来初步体会算法思维。我们先来考察<strong>一维</strong>的情况：</p><blockquote><p>输入：一个长度为<span class="math inline">\(n\)</span>的 一维数组</p><p>输出：若存在峰值（Peak Value），则输出对应下标<span class="math inline">\(i\)</span>；否则返回False</p></blockquote><p>最自然的想法是从左到右遍历，这样的时间复杂度是<span class="math inline">\(O(n)\)</span>。如果我们采取二分查找的策略，考察下标为<span class="math inline">\([\frac{n}{2}]\)</span>的元素：</p><ul><li>如果<span class="math inline">\(a_{[\frac {n}{2}]}&lt;a_{[\frac{n}{2}]+1}\)</span>，则考虑在右边寻找峰值</li><li>如果<span class="math inline">\(a_{[\frac {n}{2}]}&lt;a_{[\frac{n}{2}]-1}\)</span>，则考虑在左边寻找峰值</li><li>否则<span class="math inline">\(a_{[\frac{n}{2}]}\)</span>本身就是一个峰值</li></ul><p>由此可得：所耗费时间<span class="math inline">\(T(n)=T(\frac{n}{2})+O(1)\)</span>，由此递归式可求得时间复杂度为<span class="math inline">\(O(logn)\)</span>。</p><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220720015947368.png" style="zoom:50%;"></p><p>接着考虑<strong>二维</strong>的情况：</p><blockquote><p>输入：一个规模为<span class="math inline">\(m \timesn\)</span>的二维矩阵</p><p>输出：若存在峰值，则输出对应坐标<span class="math inline">\((i,j)\)</span>；否则返回False</p></blockquote><p>我们希望一维的解决方法能够带给我们一些启发。同理，逐个遍历所需的时间复杂度是<span class="math inline">\(O(mn)\)</span>，应该存在某种改进方式。我们考虑如何从一维<strong>推广</strong>到二维。显然，二维的峰值既是一行的峰值，又是一列的峰值。因此我们考虑如下算法：</p><ul><li>对于长度为<span class="math inline">\(m\)</span>的列向量<span class="math inline">\(\vecb_{i}\)</span>运用一维的算法，找出该列的峰值，坐标为<span class="math inline">\((i,j)\)</span></li><li>将<span class="math inline">\((i,j)\)</span>处的值和左右进行比较，若均大于左右，则为峰值；否则不是峰值</li><li>对<span class="math inline">\(i=1,2,...n\)</span>都运用如上方法</li></ul><p>显然，这个算法的时间复杂度为<span class="math inline">\(O(mlogn)\)</span>，优于遍历的算法。</p><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220720021055690.png" style="zoom:50%;"></p><h3 id="models-of-computation">3. Models of Computation</h3><p>在简单了解了一个算法问题之后，我们思考这样一个问题：不同的计算机性能不同，在这种情况下我们该如何衡量一个算法的优劣呢？答案是构造一个抽象的计算模型，考虑算法在这个模型上运行，则可以普适地衡量算法的优劣。</p><h4 id="ram">3.1 RAM</h4><p>首先要注意，我们此处所说的RAM=<strong>Random AccessMachine</strong>，而非闪存（Random AccessMemory）。我们可以将RAM简单地理解为一个无穷大的<strong>数组</strong>，这个数组满足：</p><ul><li>将内容写进某地址/读取某地址的内容，需要<span class="math inline">\(O(1)\)</span>的时间</li><li>在存储上面做四则运算，需要<span class="math inline">\(O(1)\)</span>的时间</li></ul><p>我们将RAM的一个单元称作一个“词”（word），各种数据都是以二进制词的方式存在RAM中。我们假设词的长度为<span class="math inline">\(w\)</span>，内存的大小（memory size）为<span class="math inline">\(S\)</span>，则有以下式子成立： <span class="math display">\[w \geq log(S)\]</span></p><blockquote><p>因为每个word的地址都应该是唯一的，而一位有0，1两种选择，共有<span class="math inline">\(2^{w}\)</span>种选择。若<span class="math inline">\(2^{w} &lt;S\)</span>，由抽屉定理则会出现地址相同的word，因此产生矛盾。</p></blockquote><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220720120331098.png" style="zoom:50%;"></p><h4 id="pointer-machine">3.2 Pointer Machine</h4><p>和上面提到的RAM相对偶的，我们可以把指针机简单地理解为一个<strong>链表</strong>，一个单元中存储三个值：</p><ul><li>存储的值（或者函数）</li><li>指向该单元的上一个单元的地址</li><li>该单元指向的下一个单元的地址</li></ul><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220720121049735.png" style="zoom:50%;"></p><h3 id="the-document-distance-problem">4. The Document DistanceProblem</h3><p>在本章节的最后，我们来看一个问题：如何衡量两个文本之间的“距离”？实际上，这个问题在自然语言处理、网页搜索当中都有应用，是一个基础性的问题。</p><p>首先来定义词（word）、文本（document）：</p><ul><li>词是一个从字母表中选取的字母构成的有限序列</li><li>文本是由词构成的序列（不考虑空格和标点）</li></ul><p>我们将一个有长度为<span class="math inline">\(n\)</span>，包含<span class="math inline">\(m\)</span>个互不重复的词的文本抽象成一个<span class="math inline">\(m\)</span>维向量： <span class="math display">\[D=[w_1,w_2,...w_m]\]</span> 其中<span class="math inline">\(w_{i}\)</span>是第<span class="math inline">\(i\)</span>个词的词频。（<span class="math inline">\(i=1,2,...m\)</span>）</p><p>其次我们需要选出一个量，来衡量两个文本的距离。首先想到的是点积<span class="math inline">\(D_{1} \cdotD_{2}\)</span>，但很显然文本越长，某个词出现的词频可能会变多（例如冠词“the”），所以不能排除文本长度的影响。因此我们考虑归一化，在分母除以两个文本的长度：<span class="math display">\[d(D_{1},D_{2})=\frac{D_{1}\cdot D_{2}}{n_{1}\cdot n_{2}}\]</span> 下面我们给出计算文本距离的一个算法：</p><ol type="1"><li>文本切割，统计词频</li><li>对词排序，得到两个单词顺序相同的文本向量</li><li>计算<span class="math inline">\(d(D_{1},D_{2})\)</span></li></ol><blockquote><p>这里讲的太粗浅了，实际上只是lecturer给出的一个AlogrithmThinking的例子，即：</p><ul><li>考虑算法的正确性</li><li>估计时间复杂度</li><li>写出对应的代码实现</li></ul><p>真正的文本相似度衡量，在之后的nlp学习中会进一步理解。</p></blockquote><h3 id="asymptotics">5. Asymptotics</h3><p>在分析一个算法的时间复杂度时，我们一般关注在数据规模较大的时候，算法的渐进效率，因此我们需要研究函数的渐进性质，并且用几种渐进记号来简约地表示。</p><p>首先我们来看常见的渐进记号。</p><ol type="1"><li><span class="math inline">\(\Theta(f(n)\)</span>：表示函数的渐进紧确界（asymptoticallytight bound）</li><li><span class="math inline">\(O(f(n)\)</span>：表示函数的渐进上界（asymptoticallyupper bound）</li><li><span class="math inline">\(\Omega(f(n)\)</span>：表示函数的渐进下界（asymptoticallylower bound）</li><li><span class="math inline">\(o(f(n)\)</span>：表示函数的非紧确上界</li><li><span class="math inline">\(\omega(f(n)\)</span>：表示函数的非紧确下界</li></ol><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220723225626.jpg" style="zoom:50%;"></p><p>除了上面五种比较常见的记号以外，我们还有以下三种记号需要熟悉：</p><ol type="1"><li><p><span class="math inline">\(poly(f(n)\)</span>：表示复杂度为<span class="math inline">\(f(n)^{O(1)}\)</span>，即多项式级的复杂度</p></li><li><p><span class="math inline">\(\widetildeO(f(n))\)</span>：表示复杂度的渐进上界为<span class="math inline">\(O(f(n)) \cdot poly(log(f(n)))\)</span></p></li><li><p><span class="math inline">\(\widetilde\Omega(f(n))\)</span>：表示复杂度的渐进下界为<span class="math inline">\(\Omega(f(n)) \cdot poly(log(f(n)))\)</span></p><blockquote><p>实际上就是<span class="math inline">\(O(n)\)</span>和<span class="math inline">\(\Omega(n)\)</span>后面跟了对数多项式级的修正因子</p></blockquote></li></ol><p>这三种记号在更精细的算法分析中会用到，例如后续的15-751课程。</p><hr><p>最后我们来做一个思维导图：</p><p><img src="/2022/07/23/Alogrithm-Thinking/image-20220723232615.png" style="zoom:80%;"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Alogrithm </tag>
            
            <tag> 6.006 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buffon的投针问题</title>
      <link href="/2022/07/22/Buffon%E7%9A%84%E6%8A%95%E9%92%88%E9%97%AE%E9%A2%98/"/>
      <url>/2022/07/22/Buffon%E7%9A%84%E6%8A%95%E9%92%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>下面我们来看一个概率论中经典而有趣的问题：Buffon投针问题，是Buffon伯爵在1777年提出的（就是写《自然史》的那位博物学家）。这个问题叙述如下：</p><p><strong>若将一根短针投掷在一张有均匀横纹的纸上，那么针落的位置与横纹相交的概率有多大？</strong></p><p>显然这个概率依赖于相邻两条横纹的间距<span class="math inline">\(d\)</span>，也依赖于针的长度<span class="math inline">\(l\)</span>。我们在此问题中考虑短针，其长度满足<span class="math inline">\(l \leqd\)</span>，即一根针不会同时和两条横纹相交。我们下面会证明，针落在和横纹相交的位置概率恰为：<span class="math display">\[p= \frac{2l}{\pi d}\]</span></p><h3 id="期望的线性性">期望的线性性</h3><p>若假设随机变量为相交的次数<span class="math inline">\(x\)</span>，那么所求的概率<span class="math inline">\(p\)</span>正是相交概率的期望<span class="math inline">\(E(x)\)</span>。由于期望具有<strong>线性性</strong>，我们可以知道：<span class="math display">\[E(x+y)=E(x)+E(y)\]</span> 这里的意义是，长度为<span class="math inline">\(l=x+y\)</span>的针，其交点个数的期望和两根针<span class="math inline">\(x\)</span>和<span class="math inline">\(y\)</span>的交点个数的期望之和相等。由函数方程的知识可得，由线性性和单调性可得到：<span class="math display">\[E(x)=cx\]</span> 下面的任务就是求得常系数<span class="math inline">\(c\)</span>。我们进一步推广：此时针的形状并不重要，都可以由线段形状的针进行组合。因此我们考虑一个<strong>圆形的针</strong>，其直径为间距<span class="math inline">\(d\)</span>，那么此时总会有两个交点。我们考虑这个圆的内接正<span class="math inline">\(n\)</span>边形<span class="math inline">\(P_{n}\)</span>，以及外切正<span class="math inline">\(n\)</span>边形<span class="math inline">\(P^{n}\)</span>，可得：和<span class="math inline">\(P^{n}\)</span>相交的一定和圆相交；和圆相交的一定和<span class="math inline">\(P_{n}\)</span>相交。</p><p>因此可以得到： <span class="math display">\[E(P_{n})\leq E(C) \leq E(P^{n})\]</span></p><p><span class="math display">\[\Leftrightarrow \  cL(P_{n}) \leq 2 \leq cL(P^{n})\]</span></p><p>再对上式两边取极限，<span class="math inline">\(n \rightarrow +\infty\)</span>，即有<span class="math inline">\(c = \frac{2}{\pid}\)</span>。</p><p><img src="/2022/07/22/Buffon%E7%9A%84%E6%8A%95%E9%92%88%E9%97%AE%E9%A2%98/image-20220722232540.png" style="zoom:50%;"></p><h3 id="微积分">微积分</h3><p>除了上面利用期望的性质外，我们可以用一个更加量化的微积分证法。考虑针和横纹的夹角<span class="math inline">\(\alpha\)</span>，不妨设<span class="math inline">\(0 \leq \alpha \leq\frac{\pi}{2}\)</span>，此时针的高度为<span class="math inline">\(\frac{lsin\alpha}{d}\)</span>，再对所有可能的角度取平均：<span class="math display">\[p = \frac{2}{\pi} \int_{0}^{\frac{\pi}{2}}\frac{lsin\alpha}{d}d\alpha=\frac{2l}{\pi d}\]</span> 利用微积分我们可以对这个问题进一步推广：考虑“长针”（即<span class="math inline">\(l \geq d\)</span>的情况）。 <span class="math display">\[p = \frac{2}{\pi} \int_{0}^{arcsin(d/l)}\frac{lsin\alpha}{d}d \alpha+  \int_{arcsin(d/l)}^{\frac{\pi}{2}}1\ d \alpha\]</span> 进而有： <span class="math display">\[p = 1 + \frac{2}{\pi}(\frac{l}{d}(1-\sqrt{1-\frac{d^2}{l^{2}}}\)-arcsin(\frac{d}{l}))\]</span> 对上式求导可得： <span class="math display">\[\frac{dp}{dl}=\frac{2}{\pi}(\frac{1}{d}+(\frac{d}{l}-\frac{l}{d})\cdot\frac{1}{\sqrt{l^{2}-d^{2}}})\]</span> 经计算得上式恒大于0，因此概率<span class="math inline">\(p\)</span>关于针的长度单增。我们取极限可知：</p><ul><li><span class="math inline">\(l \rightarrow +\infty,\p\rightarrow1\)</span></li><li><span class="math inline">\(l \rightarrow d,\ p\rightarrow\frac{2}{\pi}\)</span></li></ul><p><img src="/2022/07/22/Buffon%E7%9A%84%E6%8A%95%E9%92%88%E9%97%AE%E9%A2%98/image-20220723000528.png" style="zoom:50%;"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Probability </tag>
            
            <tag> &lt;Proofs from THE BOOK&gt; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代数基本定理的两个证明</title>
      <link href="/2022/07/22/%E6%9C%80%E7%9F%AD%E7%9A%84%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/"/>
      <url>/2022/07/22/%E6%9C%80%E7%9F%AD%E7%9A%84%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>我们今天来回顾两个关于代数基本定理的证明。代数基本定理叙述的是：</p><p><strong>每个复系数非常数多项式在复数域内至少有一个根。</strong></p><blockquote><p>要证明n次多项式有n个根，实际上只需要证明有一个根，然后利用复数域内的因式分解，再对n-1次多项式使用该结论，就可递归地找到n个根。</p></blockquote><h3 id="复数域上的估计">复数域上的估计</h3><p>我们先来看三个分析中的基本事实：</p><ol type="1"><li><p>多项式函数是连续的</p></li><li><p>对任意<span class="math inline">\(m \geq 1\)</span>，<span class="math inline">\(z^{m}=1\)</span>恰有<span class="math inline">\(m\)</span>个根</p><blockquote><p>事实上考虑欧拉公式，<span class="math inline">\(e^{im\theta}=1\)</span>，等价于<span class="math inline">\(\theta =\frac{(4k+1)\pi}{2m},k\in \mathbb Z\)</span>，恰有<span class="math inline">\(m\)</span>个解，复平面上对应的点将单位圆等分为<span class="math inline">\(m\)</span>份。</p></blockquote></li><li><p>（Cauchy最小值定理）紧集<span class="math inline">\(S\)</span>上的连续实值函数在<span class="math inline">\(S\)</span>中取得最小值</p><blockquote><p>紧集（compact set）指的是有界的闭集</p></blockquote></li></ol><p>接下来我们考虑一个<span class="math inline">\(n\)</span>次复多项式：<span class="math display">\[p(z)=\sum_{k=0}^{n}c_{k}z^{k}\]</span>基于上面的事实，我们将证明一个关键的引理，也被称之为<strong>d'Alembert引理</strong>或者<strong>Argand不等式</strong>：</p><p>若<span class="math inline">\(p(a) \neq 0\)</span>，则<span class="math inline">\(a\)</span>周围的每一个圆盘<span class="math inline">\(D\)</span>都含有一个内点<span class="math inline">\(b\)</span>，使得<span class="math inline">\(|p(b)|&lt;|p(a)|\)</span>。</p><p>我们首先考虑，可以不失一般性地假设<span class="math inline">\(a=0\)</span>，且<span class="math inline">\(p(a)=1\)</span>；否则可以考虑另一个多项式<span class="math inline">\(q(z)=\frac{p(z+a)}{p(a)}\)</span>，满足<span class="math inline">\(q(0)=1\)</span>，且在<span class="math inline">\(|q(b)|&lt;1\)</span>成立时，<span class="math inline">\(|p(a+b)|&lt;|p(b)|\)</span>成立，和题目所要求的相同。</p><p>因此我们可以假定<span class="math inline">\(p(z)=1+c_{1}z+c_{2}z^{2}+...c_{n}z^{n}\)</span>。不妨令最小非零系数的下标为<span class="math inline">\(m\)</span>，则原多项式可以写成： <span class="math display">\[p(z)=1+c_{m}z^{m}+z^{m+1}(c_{m+1}+c_{m+2}z+...+c_{n}z^{n-m-1})=1+c_{m}z^{m}+r(z)\]</span> 首先我们证明存在这样的一个<span class="math inline">\(\rho\)</span>，满足<span class="math inline">\(0&lt;\rho&lt;1\)</span>，且有： <span class="math display">\[|r(z)|&lt;|c_{m}z^{m}|&lt;1,\ \forall \ 0&lt;|z|\leq\rho\]</span> 对于<span class="math inline">\(|z|&lt;1\)</span>，如果：<span class="math display">\[\rho _{1}=\frac{|c_{m}|}{|c_{m+1}+c_{m+2}+...+|c_{m}|}\]</span></p><p><span class="math display">\[\rho_{2} = |c_{m}|^{-1/m}\]</span></p><p>则取<span class="math inline">\(\rho=min\{\rho_{1},\rho_{2},1\}\)</span>，则下式成立：<span class="math display">\[|r(z)|\leq|z|^{m+1}(|c_{m+1}|+|c_{m+2}|+...+|c_{n}|)&lt;|c_{m}z^{m}|&lt;1\]</span> 下面考虑固定一个满足条件的<span class="math inline">\(\rho\)</span>，使得<span class="math inline">\(\rho &lt; R\)</span>，其中<span class="math inline">\(R\)</span>是我们所做的圆盘的半径。（实际上这是一个以原点为圆心的圆）由三角不等式：<span class="math display">\[|p(b)| \leq |1+c_{m}b^{m}|+|r(b)|\]</span> 我们考虑取<span class="math inline">\(b = \rho\zeta\)</span>，其中<span class="math inline">\(\zeta\)</span>为<span class="math inline">\(-\barc_{m}/|c_{m}|\)</span>的一个m次单位根，则有： <span class="math display">\[c_{m}b^{m}=c_{m} \rho^{m} \zeta ^{m}=-|c_{m}| \rho^{m}\]</span> 进而有： <span class="math display">\[|p(b)| \leq 1-|c_{m}| \rho^{m}+|r(b)|&lt;1\]</span> 综上引理得证。</p><blockquote><p>几何地理解，我们证明了对于每一个多项式函数，在复平面的原点附近，画一个任意小的圆，其中都存在一个点，将这个点代入多项式，所得到的函数值小于1。</p></blockquote><p>我们回到原定理的证明，考虑<span class="math inline">\(|z| \rightarrow+\infty\)</span>，<span class="math inline">\(|p(z)| \rightarrow +\infty\)</span>，故存在一个圆，使得其圆上的每一个点<span class="math inline">\(z\)</span>，都满足<span class="math inline">\(|p(z)|&gt;|p(0)|\)</span>。考虑圆边界+内部这个紧集，由Cauchy最小值定理知一定存在最小值，且不在边界上。</p><p>我们假设最小值点<span class="math inline">\(z_{0}\)</span>，由d'Alembert引理可知，若<span class="math inline">\(p(z_{0}) \neq0\)</span>，则总是存在更小的值，和其最值性矛盾。因此可得，<span class="math inline">\(p(z_{0})=0\)</span>。</p><p><img src="/2022/07/22/%E6%9C%80%E7%9F%AD%E7%9A%84%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/image-20220722115359876.png" style="zoom: 67%;"></p><h3 id="画图-奇偶性">画图 + 奇偶性</h3><p>这个证法来源于Klein的《高观点下的初等数学》，是我在一个大佬的笔记里面看到的。</p><p>首先我们假设<span class="math inline">\(f(z)=\sum_{i=0}^{n}a_{i}z^{i}\)</span>，那么有：<span class="math display">\[f(z)=0 \Leftrightarrow Re(f(z))=0 ,Im(f(z))=0\]</span> 当<span class="math inline">\(|z|\)</span>很大的时候，我们可以忽略低阶项，近似为<span class="math inline">\(f(z)=a_{n}z^{n}\)</span>，则实部为0对应2n条射线：<span class="math display">\[\theta = \frac{1}{n} \cdot (\frac{\pi}{2}+k\pi)\]</span> 虚部为0对应另外2n条射线： <span class="math display">\[\theta = \frac{1}{n}\cdot k\pi\]</span> 但是这对应的是<span class="math inline">\(|z|\)</span>充分大的渐进情况，而在<span class="math inline">\(|z|\)</span>较小的时候，我们还需要用平滑的曲线将实部和虚部的射线分别相连。我们假设实部用红线相连，虚部用蓝线相连，若红线和蓝线相交，则说明存在零点。</p><p>于是这个问题被转化成了如下问题：</p><p>一个圆上等距交叉分布着2n个蓝点和2n个红点，红点和红点相连，蓝点和蓝点相连，则红线和蓝线一定存在交点。</p><p>这个问题用奇偶性很容易证明。我们假设红点<span class="math inline">\(r_{1}\)</span>和红点<span class="math inline">\(r_{2}\)</span>相连，则两点之间一定有奇数个蓝点，不能满足两两相连。因此一定存在蓝点<span class="math inline">\(b_{1}\)</span>和红线与圆弧构成的区域之外的蓝点<span class="math inline">\(b_{2}\)</span>相连，此时红线<span class="math inline">\(r_{1}r_{2}\)</span>与蓝线<span class="math inline">\(b_{1}b_{2}\)</span>一定相连。</p><p><img src="/2022/07/22/%E6%9C%80%E7%9F%AD%E7%9A%84%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86%E8%AF%81%E6%98%8E/image-20220722121238325.png" style="zoom:67%;"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> &lt;Proofs from THE BOOK&gt; </tag>
            
            <tag> Algebra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/07/22/Hello-World/"/>
      <url>/2022/07/22/Hello-World/</url>
      
        <content type="html"><![CDATA[<p>将博客从fluid风格迁移到butterfly风格，可以正经开始写一点博客了。</p><p>之前看到zcy和c7w的博客，感叹他们只比我在华子大学多待一年，但是却学会了这么多东西，有这么丰富的生活，对学科有自己的见解，可以称得上是<strong>成熟的researcher</strong>了，而我还窝在寝室混吃等死，令人感慨。</p><blockquote><p>我记得zcy将他的学年总结发给我，我看到原来世俗意义上获得成功的他，也是充满了纠结和痛苦。这某种程度上宽慰了我，但是同时也让我欣赏他的坦诚。另一方面，我发现过着破碎生活的我，是无法用文字概括自己的生活的，这让我更加失望了。</p></blockquote><p>经常会陷入这种感觉：想学点什么，但是又提不起力气；想脱离现在的颓废，但觉得颓废也还好，混吃等死也是一种活法；昨天的兴趣还在A，今天又把视线转到B了。</p><p>这一看就不是一个华子大学的优秀学生，真正的优秀同学一般都是精力充沛，生活有清晰的规划，擅长multi-tasking，同时能hold住刷gpa、社工、科研乃至感情生活，最后淡定又骄傲地将一只手放在日晷上，拍下自己光鲜的学生会竞选海报。</p><p>而我呢？我记得Narc曾经点破我：</p><blockquote><p>你不过是个<strong>时刻怀疑自己，却又莫名其妙地坚持着</strong>的小孩而已。</p><p>（现在Narc也消失了，不知道是好事还是坏事，只是觉得空荡荡的）</p></blockquote><p>大概说的就是这种感觉。我记得在鱼老师的推荐下看了《蓝色大门》，看到那段经典对白的时候感到浑身战栗：</p><p><img src="/2022/07/22/Hello-World/image-20220723211721.jpg" style="zoom:67%;"></p><p>不过没有关系，我也没有完全浪费这个夏天，至少搭起来了个博客，可以把自己的学习和思绪用文字的形式固定下来。这让我觉得自己不全是一个废物，至少在缓慢地向前面挪动。就像《蓝色大门》后面紧跟着的几句对白一样：</p><blockquote><p>“但是总是会留下一些什么吧。</p><p>留下什么，我们就变成什么样的大人。”</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
